package me.zakharov.ants.model

import com.badlogic.gdx.math.MathUtils.lerp
import me.apemanzilla.ktcl.CLCommandQueue
import me.apemanzilla.ktcl.CLContext
import me.apemanzilla.ktcl.cl10.*
import me.zakharov.createFloatMatrix2d
import me.zakharov.share
import me.zakharov.utils.IHeadlessActor


data class PheromonesConfig(
    val alpha: Float = 0.95f, // in 1 sec
    val thres: Float = 0.01f
)
//enum PherType { none = 0, trail = 1, food_trail = -1, debug = -2 } ;
// @CLCode
enum class PherType(val v: Float) {
    none(0f), trail(1f), food_trail(-1f), debug(-2f);
    /// TBD kotlinc plugin for @CLCode
    companion object {
        fun clCode(): String =
            enumValues<PherType>().joinToString(
                separator = ", ",
                prefix = "//generated by host\nenum PherType { ",
                postfix = " };\n"
            ) {
                "%s = %.0f".format(it.name, it.v)
            }
    }
}
class Pheromones(
        ctx: CLContext,
        private val cmd: CLCommandQueue,
        val width: Int,
        val height: Int,
        kernel: String = Pheromones::class.java.getResource("/kernels/decay.kernel")!!.readText()
) : IHeadlessActor {

    private val alpha: Float = 0.75f // in 1 sec
    private val thres: Float = 0.003f

    fun reset(): Boolean {
        m.clear()
        return true
    }

    /// opencl stuff
    private val prog = ctx.createProgramWithSource( kernel )
            .also { it.build() }

    internal val m = createFloatMatrix2d(width, height)
    internal val shared = ctx.share(m.buff)

    private val kernel = prog.createKernel("decay_kernel").apply {
        setArg(1, thres)
        setArg(2, shared.remoteBuff)
        setArg(3, shared.remoteBuff)
    }
    /// end opencl stuff


    override fun act(delta: Float) {
        with(kernel) {
            setArg(0, lerp(1f, alpha, delta))
        }

        with(cmd) {
            enqueueWriteBuffer(shared.buff, shared.remoteBuff)
            enqueueNDRangeKernel(kernel, m.width*m.height.toLong())
            finish()
            enqueueReadBuffer(shared.remoteBuff, shared.buff)
        }
    }


    fun print() {

        m.forEach { x, y, v ->
            if (x==0) println()
            when(v) {
                PherType.food_trail.v -> print("f")
                PherType.trail.v -> print("t")
                PherType.debug.v -> print("D")
                PherType.none.v -> print(" ")
            }
        }
    }
}
