typedef struct {
    uint pos_tail; // push here
    uint pos_front; // pop here
    float2 queue[MAX_QUEUE_SIZE];
} queue;

bool queue_empty(queue const *q) {
    return q->pos_tail <= q->pos_front;
}

void queue_push(queue* q, float2 v) {
    q->queue[q->pos_tail++] = v;
}

float2 queue_pop(queue* q) {
    return q->queue[q->pos_front++];
}

float random (float2 _st) {
    float rem;
    return fract(sin(dot(_st.xy, (float2)(12.9898,78.233))) * 43758.5453123, &rem);
}

__kernel
void ant_kernel(
    float speed,
    uint w,
    uint h,
    __global float *pheromones,
    __global float2 *coords,
    __global float2 *velocities,
    __global float2 *out,
    __global float *outPheromones
    )
{
    int index = get_global_id(0);

    float2 pos = coords[index];
    float2 vel = velocities[index];
    queue cells;

    queue_push(&cells, pos);

    pheromones[(int)pos.x + (int)pos.y*w] = 1.0f;
    float r = (random(pos) - 0.5) * 0.17453292519943 /*10 deg*/;
    //r = -0.01f;
    vel = (float2)( vel.x * cos(r) - vel.y * sin(r), vel.x * sin(r) + vel.y * cos(r) );
    velocities[index] = vel;

    out[index] = pos + vel * speed;



    if ( out[index].x < 0 ) out[index].x += w;
    else if (out[index].x > w ) out[index].x -= w;

    if ( out[index].y < 0 ) out[index].y += h;
    else if ( out[index].y > h ) out[index].y -= h;
}
